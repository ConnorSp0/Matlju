/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Package1;

//import com.microsoft.sqlserver.jdbc.StringUtils;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.lang3.math.NumberUtils;
import java.awt.Color;
import com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException;
import com.mysql.jdbc.MysqlDataTruncation;
import java.sql.SQLException;
/**
 *
 * @author John Mathew Dasalla
 */
public class Database_Main extends javax.swing.JFrame {
    
    Connection con = null;             //Declaration of Global Variables
    PreparedStatement pst=null;
    ResultSet rs= null;
    SimpleDateFormat sdf1 = new SimpleDateFormat("MM/dd/yy");
    SimpleDateFormat sdf2 = new SimpleDateFormat("hh:mm aa");
    String StrReadTableSlctd;
    DefaultComboBoxModel CBModel2 = new DefaultComboBoxModel();
    
    /**
     * Creates new form Database_Main
     */
    public Database_Main() {
        initComponents();
        Update();
        
    }
    public void Update(){
        try{
            
            Class.forName("com.mysql.jdbc.Driver"); 
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root","");
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Setting Employee in Main ComboBox~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
            DefaultComboBoxModel CBModel = new DefaultComboBoxModel();
            DefaultComboBoxModel CBModel2 = new DefaultComboBoxModel();
            CBEmployee.setModel(CBModel);
            CBBnEBranchLoc.setModel(CBModel2);
            pst=con.prepareStatement("SELECT * FROM employee_information");
            rs = pst.executeQuery();
            while(rs.next()){
                CBModel.addElement(rs.getString("Employee_Name"));
            }
            CBEmployee.setModel(CBModel);
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Setting Branch Locations in Branch & Employee Tab~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            pst=con.prepareStatement("SELECT * FROM branch");
            rs = pst.executeQuery();
            while(rs.next()){
                CBModel2.addElement(rs.getString("Branch_Location"));
            }
            CBBnEBranchLoc.setModel(CBModel2);
            
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        TF_CustN = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TF_CustC = new javax.swing.JTextField();
        TF_StrTP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CBPymSrv = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        TFSrvAmt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        TFSrvFee = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        TFSrvTP = new javax.swing.JTextField();
        BtnTransSrvO = new javax.swing.JButton();
        BtnTransStrO = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        TF_StrAmtP = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        TFSrvAmtPd = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        TFSrvChange = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        TFStrChange = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        CBUpdateTable = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        TFUpdateC1 = new javax.swing.JTextField();
        TFUpdateData = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        TFUpdateC2 = new javax.swing.JTextField();
        TFUpdateC3 = new javax.swing.JTextField();
        TFUpdateC5 = new javax.swing.JTextField();
        TFUpdateC4 = new javax.swing.JTextField();
        TFUpdateC6 = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        CBUpdateRDT = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        BUpdateWhole = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        CBUpdateSingleAttribute = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        TFUpdateNew = new javax.swing.JTextField();
        BUpdateOne = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        TFUpdateLabel1 = new javax.swing.JTextField();
        TFUpdateLabel2 = new javax.swing.JTextField();
        TFUpdateLabel3 = new javax.swing.JTextField();
        TFUpdateLabel4 = new javax.swing.JTextField();
        TFUpdateLabel5 = new javax.swing.JTextField();
        TFUpdateLabel6 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        CBReadTable = new javax.swing.JComboBox<>();
        TFReadFrmRow = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        TFReadToRow = new javax.swing.JTextField();
        BReadChsnRows = new javax.swing.JButton();
        BReadAllRows = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableRead = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        TFPrimaryKey = new javax.swing.JTextField();
        BReadSpsfcRow = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        TFBnEBranchN = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        BtnBnEBranchReg = new javax.swing.JButton();
        TFBnETIN = new javax.swing.JTextField();
        TFBnEBIR = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        LabelBnEBAdd = new javax.swing.JLabel();
        TFBnEBD = new javax.swing.JTextField();
        TFBnEBAdd = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        TFBnEEmpN = new javax.swing.JTextField();
        CBBnEBranchLoc = new javax.swing.JComboBox<>();
        CBBnEShift = new javax.swing.JComboBox<>();
        TFBnEEmpAdd = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        BtnBnEEmpReg = new javax.swing.JButton();
        CBBnEEmpPos = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        TFBnEEmpC = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableLimits = new javax.swing.JTable();
        CBLimitsTable = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        BtnLimits = new javax.swing.JToggleButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        CBDeleteTable = new javax.swing.JComboBox<>();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        TFDeleteFromRow = new javax.swing.JTextField();
        TFDeleteToRow = new javax.swing.JTextField();
        BtnDeleteChsn = new javax.swing.JButton();
        BtnDeleteAll = new javax.swing.JButton();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        CBDeleteOneType = new javax.swing.JComboBox<>();
        jLabel47 = new javax.swing.JLabel();
        TFDeleteOneData = new javax.swing.JTextField();
        BtnDeleteOne = new javax.swing.JButton();
        CBEmployee = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MATLJU");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        TF_CustN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_CustNActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Customer Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Contact No.");

        TF_CustC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_CustCActionPerformed(evt);
            }
        });

        TF_StrTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_StrTPActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel3.setText("Store Orders");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel4.setText("Payment Service Orders ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setText("Total Price");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setText("Payment Service");

        CBPymSrv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GCash", "Paymaya", "Steam Wallet" }));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setText("Amount");

        TFSrvAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFSrvAmtActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setText("Fee");

        TFSrvFee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFSrvFeeActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel10.setText("Total Price");

        TFSrvTP.setEditable(false);
        TFSrvTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFSrvTPActionPerformed(evt);
            }
        });

        BtnTransSrvO.setText("Create Order");
        BtnTransSrvO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTransSrvOActionPerformed(evt);
            }
        });

        BtnTransStrO.setText("Create Order");
        BtnTransStrO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTransStrOActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setText("Amount Paid");

        TF_StrAmtP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_StrAmtPActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setText("Amount Paid");

        TFSrvAmtPd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFSrvAmtPdActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setText("Change");

        TFSrvChange.setEditable(false);
        TFSrvChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFSrvChangeActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel13.setText("Change");

        TFStrChange.setEditable(false);
        TFStrChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFStrChangeActionPerformed(evt);
            }
        });

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TF_StrTP, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(TFStrChange, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                .addComponent(TF_StrAmtP, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(BtnTransStrO, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel12))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BtnTransSrvO, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TFSrvTP, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TFSrvChange, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel11))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(55, 55, 55)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TFSrvAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CBPymSrv, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TFSrvAmtPd, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TFSrvFee, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(116, 116, 116))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(100, 100, 100))))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_CustN, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_CustC, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_CustN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_CustC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TF_StrTP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TF_StrAmtP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(BtnTransStrO, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFStrChange, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CBPymSrv, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFSrvAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFSrvFee, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFSrvAmtPd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFSrvTP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(BtnTransSrvO, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFSrvChange, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(76, 76, 76))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator5)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Transaction", jPanel1);

        jPanel3.setMaximumSize(new java.awt.Dimension(3000, 32767));

        CBUpdateTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch", "Branch_TIN", "Branch_BIR", "Employee", "Employee_Information", "Payment_Service_Orders", "Service_Transactions", "Service_Customer", "Store_Orders", "Store_Transactions", "Store_Customer", " " }));
        CBUpdateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBUpdateTableActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel19.setText("Table");

        TFUpdateC1.setEditable(false);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel23.setText("Choose Record");

        TFUpdateC2.setEditable(false);

        TFUpdateC3.setEditable(false);

        TFUpdateC5.setEditable(false);

        TFUpdateC4.setEditable(false);

        TFUpdateC6.setEditable(false);

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel33.setText("Type");

        CBUpdateRDT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st Field Data", "Row No." }));

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel21.setText("Type Data");

        BUpdateWhole.setText("Update");
        BUpdateWhole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BUpdateWholeActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("Choose Field");

        CBUpdateSingleAttribute.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CBUpdateSingleAttribute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBUpdateSingleAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBUpdateSingleAttributeActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("New Field Data");

        BUpdateOne.setText("Update");
        BUpdateOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BUpdateOneActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel25.setText("Single Attribute Update");

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel26.setText("Whole Record Update");

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        TFUpdateLabel1.setEditable(false);
        TFUpdateLabel1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        TFUpdateLabel2.setEditable(false);
        TFUpdateLabel2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        TFUpdateLabel3.setEditable(false);
        TFUpdateLabel3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        TFUpdateLabel4.setEditable(false);
        TFUpdateLabel4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        TFUpdateLabel5.setEditable(false);
        TFUpdateLabel5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        TFUpdateLabel6.setEditable(false);
        TFUpdateLabel6.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel25))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addGap(6, 6, 6)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TFUpdateNew)
                            .addComponent(CBUpdateSingleAttribute, 0, 161, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(BUpdateOne, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TFUpdateLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(TFUpdateLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TFUpdateLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TFUpdateC2)
                            .addComponent(TFUpdateC3)
                            .addComponent(TFUpdateC1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(TFUpdateLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFUpdateC6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(TFUpdateLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFUpdateC5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(TFUpdateLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFUpdateC4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(BUpdateWhole, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel26)
                        .addContainerGap(194, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBUpdateTable, 0, 283, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBUpdateRDT, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TFUpdateData, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(CBUpdateTable, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(CBUpdateRDT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(TFUpdateData, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(TFUpdateC4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(TFUpdateLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(TFUpdateC1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(TFUpdateLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFUpdateC2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFUpdateLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFUpdateC5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFUpdateLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFUpdateC3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFUpdateLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFUpdateC6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFUpdateLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(CBUpdateSingleAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(TFUpdateNew, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(BUpdateOne, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(BUpdateWhole, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Update Data", jPanel3);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel16.setText("Table");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel17.setText("From Row No.:");

        CBReadTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch", "Branch_TIN", "Branch_BIR", "Employee", "Employee_Information", "Store_Orders", "Store_Transactions", "Store_Customer", "Payment_Service_Orders", "Service_Transactions", "Service_Customer" }));
        CBReadTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBReadTableActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel27.setText("To Row No.:");

        BReadChsnRows.setText("Read Chosen Rows");
        BReadChsnRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BReadChsnRowsActionPerformed(evt);
            }
        });

        BReadAllRows.setText("Read All Rows");
        BReadAllRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BReadAllRowsActionPerformed(evt);
            }
        });

        TableRead.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableRead);

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel18.setText("1st Field Data:");

        BReadSpsfcRow.setText("Read Specific Row");
        BReadSpsfcRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BReadSpsfcRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(CBReadTable, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFReadFrmRow, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFPrimaryKey, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFReadToRow, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(BReadSpsfcRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BReadAllRows, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BReadChsnRows))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(CBReadTable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(TFReadFrmRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(TFReadToRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BReadChsnRows))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BReadAllRows, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(TFPrimaryKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BReadSpsfcRow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Details", jPanel4);

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel20.setText("Employee Registry");

        jLabel35.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel35.setText("Branch Registry");

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel36.setText("Branch Name");

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel37.setText("TIN Code");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel38.setText("BIR Permit");

        BtnBnEBranchReg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnBnEBranchReg.setText("Register");
        BtnBnEBranchReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBnEBranchRegActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel39.setText("Branch Dimensions");

        LabelBnEBAdd.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LabelBnEBAdd.setText("Address");

        TFBnEBAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFBnEBAddActionPerformed(evt);
            }
        });

        CBBnEBranchLoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        CBBnEShift.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CBBnEShift.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M (4 AM - 12 PM)", "N (12 PM - 8 PM)", "E (8 PM - 4 AM)" }));

        TFBnEEmpAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFBnEEmpAddActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel28.setText("Employee Name");

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel29.setText("Branch Location");

        BtnBnEEmpReg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnBnEEmpReg.setText("Register");
        BtnBnEEmpReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBnEEmpRegActionPerformed(evt);
            }
        });

        CBBnEEmpPos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CBBnEEmpPos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Staff", "Manager" }));

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel30.setText("Contact Number");

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel31.setText("Address");

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel32.setText("Shift Hours");

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel34.setText("Position");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel36)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel38))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TFBnETIN, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFBnEBIR, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFBnEBranchN, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(jLabel39)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TFBnEBD, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(112, 112, 112)
                                        .addComponent(LabelBnEBAdd)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BtnBnEBranchReg, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TFBnEBAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TFBnEEmpN, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(80, 80, 80)
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CBBnEShift, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(59, 59, 59)
                                                    .addComponent(jLabel34)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(CBBnEEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(171, 171, 171))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addComponent(jLabel30)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(TFBnEEmpC, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel31)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(jLabel29)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(CBBnEBranchLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(22, 22, 22)))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BtnBnEEmpReg, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TFBnEEmpAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addGap(49, 49, 49))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFBnEBranchN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFBnETIN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFBnEBIR, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(TFBnEBD, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelBnEBAdd)
                            .addComponent(TFBnEBAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(BtnBnEBranchReg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TFBnEEmpN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel32)
                        .addComponent(CBBnEShift, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFBnEEmpC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(TFBnEEmpAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBBnEEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBBnEBranchLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(BtnBnEEmpReg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Branch & Employees", jPanel2);

        TableLimits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Limit", "Maximum Value/Length"
            }
        ));
        jScrollPane2.setViewportView(TableLimits);

        CBLimitsTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch", "Branch_TIN", "Branch_BIR", "Employee", "Employee_Information", "Payment_Service_Orders", "Service_Transactions", "Service_Customer", "Store_Orders", "Store_Transactions", "Store_Customer" }));
        CBLimitsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBLimitsTableActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel40.setText("Table");

        BtnLimits.setText("Read Limits");
        BtnLimits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLimitsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBLimitsTable, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(BtnLimits)))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnLimits, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CBLimitsTable, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel40)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Limits", jPanel6);

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel41.setText("Table");

        CBDeleteTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        CBDeleteTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch", "Branch_TIN", "Branch_BIR", "Employee", "Employee_Information", "Payment_Service_Orders", "Service_Transactions", "Service_Customer", "Store_Orders", "Store_Transactions", "Store_Customer" }));

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel42.setText("From Row No.:");

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel43.setText("Multiple Records Delete");

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel44.setText("To Row No.:");

        BtnDeleteChsn.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BtnDeleteChsn.setText("Delete Chosen Records");
        BtnDeleteChsn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteChsnActionPerformed(evt);
            }
        });

        BtnDeleteAll.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BtnDeleteAll.setText("Delete All Records");
        BtnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteAllActionPerformed(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel45.setText("One Record Delete");

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel46.setText("Type");

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        CBDeleteOneType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st Field Data", "Row No." }));

        jLabel47.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel47.setText("Type Data");

        BtnDeleteOne.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BtnDeleteOne.setText("Delete One Record");
        BtnDeleteOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteOneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator7))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel43)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(BtnDeleteAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BtnDeleteChsn, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel42)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TFDeleteFromRow, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel44)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TFDeleteToRow, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)))))
                        .addGap(107, 107, 107)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(jLabel45))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel47)
                                    .addComponent(jLabel46))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CBDeleteOneType, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFDeleteOneData, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(BtnDeleteOne, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBDeleteTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(CBDeleteTable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel43)
                                .addGap(32, 32, 32)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel42)
                                    .addComponent(TFDeleteFromRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFDeleteToRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel44))
                                .addGap(34, 34, 34)
                                .addComponent(BtnDeleteChsn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(BtnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel45)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel46)
                            .addComponent(CBDeleteOneType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFDeleteOneData, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel47))
                        .addGap(38, 38, 38)
                        .addComponent(BtnDeleteOne, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Delete", jPanel7);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 830, 590));

        CBEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CBEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mathew Dasalla", "John Garcia", "Nick Spencer" }));
        CBEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBEmployeeActionPerformed(evt);
            }
        });
        getContentPane().add(CBEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, 180, 30));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Employee Working:");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, -1, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI Semibold", 1, 28)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(187, 32, 32));
        jLabel15.setText("Alfamart");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 120, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBEmployeeActionPerformed

    }//GEN-LAST:event_CBEmployeeActionPerformed

    private void TFStrChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFStrChangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFStrChangeActionPerformed

    private void TFSrvChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFSrvChangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFSrvChangeActionPerformed

    private void TFSrvAmtPdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFSrvAmtPdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFSrvAmtPdActionPerformed

    private void TF_StrAmtPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_StrAmtPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_StrAmtPActionPerformed

    private void BtnTransStrOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTransStrOActionPerformed
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~STORE ORDERS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
     try{
        String strTotalPrice = TF_StrTP.getText();
        String strAmountPaid = TF_StrAmtP.getText();
        Float intTotalPrice = Float.parseFloat(strTotalPrice);
        Float intAmountPaid = Float.parseFloat(strAmountPaid);
        int IntEmployeePresence =0;
        if(Float.compare(intAmountPaid,intTotalPrice)>0||Float.compare(intAmountPaid,intTotalPrice)==0){
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server
            Class.forName("com.mysql.jdbc.Driver");
            pst=con.prepareStatement("SELECT * FROM `employee_information`");  //Setting Working Employee's ID to Store Order
            rs = pst.executeQuery(); 
            String StrWrkEmp = (String)CBEmployee.getSelectedItem();
            String StrWrkEmpID="";
            while(rs.next()){          
                if(Objects.equals(rs.getString("Employee_Name"),StrWrkEmp)){
                    StrWrkEmpID=rs.getString("Employee_ID");
                    IntEmployeePresence =1;
                    break;
                }
            }  
            if(IntEmployeePresence==1){
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Store Order Record~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
                Date date = new Date();
                pst =con.prepareStatement("INSERT INTO `store_orders` (`Store_Receipt_Code`, `Employee_ID`, `Store_Order_Time`, `Store_Order_Date`) VALUES (?, ?, ?, ?);");
                pst.setString(1, null);
                pst.setString(2, StrWrkEmpID);
                pst.setString(3, sdf2.format(date));
                pst.setString(4, sdf1.format(date));
                pst.executeUpdate(); 
       //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Finding Receipt Code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                String StrStrRcpCd=""; 
                pst=con.prepareStatement("SELECT * FROM `store_orders`");   
                rs = pst.executeQuery();
                while(rs.next()){
                    StrStrRcpCd = rs.getString("Store_Receipt_Code");
                }
       //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Store Transaction Record~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                pst=con.prepareStatement("INSERT INTO `store_transactions` (`Store_Receipt_Code`, `Total_Store_Price`, `Store_Amount_Paid`) VALUES (?, ?, ?);");   
                pst.setString(1, StrStrRcpCd);
                pst.setString(2, TF_StrTP.getText());
                pst.setString(3, TF_StrAmtP.getText());
                pst.executeUpdate();  
       //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Getting Store Change~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
                pst=con.prepareStatement("SELECT * FROM `store_transactions`");   
                rs = pst.executeQuery();
                while(rs.next()){
                    TFStrChange.setText(rs.getString("Store_Change"));
                }
       //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Getting Store Change~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
                pst=con.prepareStatement("INSERT INTO `store_customer` (`Store_Receipt_Code`, `Customer_Name`, `Customer_Contact`) VALUES (?, ?, ?);");   
                pst.setString(1, StrStrRcpCd);
                pst.setString(2, TF_CustN.getText());
                pst.setString(3, TF_CustC.getText());
                pst.executeUpdate();  
                JOptionPane.showMessageDialog(null,"Store Order success");
            }
            else
                JOptionPane.showMessageDialog(null,"Employees must be registered first.");
        }
        else
            JOptionPane.showMessageDialog(null,"In Store Orders, Amount Paid should be greater than or equal to Total Price");
     }
     catch(MysqlDataTruncation e){  //Catching Invalid Monetary Values or Incomplete Data Given
         try{
             con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); 
             Class.forName("com.mysql.jdbc.Driver");
             pst=con.prepareStatement("SELECT * FROM `store_orders`");  
             rs = pst.executeQuery(); 
             String StrLastPrimaryData="";
             String StrQuery;
             while(rs.next()){
                 StrLastPrimaryData=rs.getString("Store_Receipt_Code");
             }
             StrQuery = "DELETE FROM store_orders WHERE `store_orders`.`Store_Receipt_Code`="+StrLastPrimaryData;
             pst=con.prepareStatement(StrQuery);  //Deleting Incorrect Record
             pst.executeUpdate();
             JOptionPane.showMessageDialog(null, "Enter Numbers only and input all Monetary Details");
         }
         catch(Exception ex){
             JOptionPane.showMessageDialog(null,"Invalid Inputs"); 
         }
     }
     catch(Exception ex){
         JOptionPane.showMessageDialog(null,"Invalid Inputs");
     }
    
    }//GEN-LAST:event_BtnTransStrOActionPerformed

    private void BtnTransSrvOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTransSrvOActionPerformed
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PAYMENT SERVICE ORDERS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
        try{
            String srvAmt = TFSrvAmt.getText();
            String srvAmountPaid = TFSrvAmtPd.getText();
            String srvServiceFee = TFSrvFee.getText();
            Float intTotalPrice = Float.parseFloat(srvAmt)+Float.parseFloat(srvServiceFee);
            Float intAmountPaid = Float.parseFloat(srvAmountPaid);
            int IntEmployeePresence =0;
            if(Float.compare(intAmountPaid,intTotalPrice)>0||Float.compare(intAmountPaid,intTotalPrice)==0){
                con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server
                Class.forName("com.mysql.jdbc.Driver");
                pst=con.prepareStatement("SELECT * FROM `employee_information`"); //Setting the Working Employee's ID to the Store Order
                rs = pst.executeQuery(); 
                String StrWrkEmp = (String)CBEmployee.getSelectedItem();
                String StrWrkEmpID="";
                while(rs.next()){          
                    if(Objects.equals(rs.getString("Employee_Name"),StrWrkEmp)){
                        StrWrkEmpID=rs.getString("Employee_ID");
                        IntEmployeePresence =1;
                        break;
                    }
                }
                if(IntEmployeePresence==1){
      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Payment Service Order Record~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
                    Date date = new Date();
                    pst =con.prepareStatement("INSERT INTO `payment_service_orders` (`Service_Receipt_Code`, `Employee_ID`, `Payment_Service`, `Service_Order_Time`, `Service_Order_Date`) VALUES (?, ?, ?, ?, ?);");
                    pst.setString(1, null);
                    pst.setString(2, StrWrkEmpID);
                    pst.setString(3, (String)CBPymSrv.getSelectedItem());
                    pst.setString(4, sdf2.format(date));
                    pst.setString(5, sdf1.format(date));
                    pst.executeUpdate(); 
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Searching for Service Receipt Code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
                    pst=con.prepareStatement("SELECT * FROM `payment_service_orders`");
                    String StrSrvRcpCd="";
                    rs = pst.executeQuery();
                    while(rs.next()){
                         StrSrvRcpCd = rs.getString("Service_Receipt_Code");
                    }
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Service Transaction Record~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
                    pst =con.prepareStatement("INSERT INTO `service_transactions` (`Service_Receipt_Code`, `Service_Amount`, `Service_Fee`, `Service_Amount_Paid`) VALUES (?, ?, ?, ?);");
                    pst.setString(1, StrSrvRcpCd);
                    pst.setString(2, TFSrvAmt.getText());
                    pst.setString(3, TFSrvFee.getText());
                    pst.setString(4, TFSrvAmtPd.getText());
                    pst.executeUpdate();   
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Getting Service Change~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
                    pst=con.prepareStatement("SELECT * FROM `service_transactions`");   
                    rs = pst.executeQuery();
                    while(rs.next()){
                         TFSrvChange.setText(rs.getString("Service_Change"));
                         TFSrvTP.setText(rs.getString("Total_Service_Price"));
                    }
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Service Customer~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
                    pst =con.prepareStatement("INSERT INTO `service_customer` (`Service_Receipt_Code`, `Customer_Name`, `Customer_Contact`) VALUES (?, ?, ?);");
                    pst.setString(1, StrSrvRcpCd);
                    pst.setString(2, TF_CustN.getText());
                    pst.setString(3, TF_CustC.getText());
                    pst.executeUpdate(); 
                    JOptionPane.showMessageDialog(null,"Service Order success");
                }
                else
                    JOptionPane.showMessageDialog(null,"Employee must be registered first");
            }
            else
                JOptionPane.showMessageDialog(null,"In Payment Service Orders, Amount Paid should be greater than or equal to Total Price");
        }
        catch(MysqlDataTruncation e){
            try{
                con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); 
                Class.forName("com.mysql.jdbc.Driver");
                pst=con.prepareStatement("SELECT * FROM `payment_service_orders`");  
                rs = pst.executeQuery(); 
                String StrLastPrimaryData="";
                String StrQuery;
                while(rs.next()){
                    StrLastPrimaryData=rs.getString("Service_Receipt_Code");
                }
                StrQuery = "DELETE FROM payment_service_orders WHERE `payment_service_orders`.`Service_Receipt_Code`="+StrLastPrimaryData;
                pst=con.prepareStatement(StrQuery);  //Deleting Incorrect Record
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Enter Numbers only and input all Monetary Details");
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null,"Invalid Inputs");
            }
        }   
        catch(Exception ex){
            JOptionPane.showMessageDialog(null,"Invalid Inputs");
        }
    }//GEN-LAST:event_BtnTransSrvOActionPerformed

    private void TFSrvTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFSrvTPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFSrvTPActionPerformed

    private void TFSrvFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFSrvFeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFSrvFeeActionPerformed

    private void TFSrvAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFSrvAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFSrvAmtActionPerformed

    private void TF_StrTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_StrTPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_StrTPActionPerformed

    private void TF_CustCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_CustCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_CustCActionPerformed

    private void TF_CustNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_CustNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_CustNActionPerformed

    private void BReadAllRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BReadAllRowsActionPerformed
    try{
        con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
        Class.forName("com.mysql.jdbc.Driver");
        int IntColumnNo;
        String StrColumnName[];
        StrReadTableSlctd = (String)CBReadTable.getSelectedItem();
        StrReadTableSlctd = StrReadTableSlctd.toLowerCase();
        String StrQuery = "SELECT * FROM "+StrReadTableSlctd;//Reading DBS 
        pst=con.prepareStatement(StrQuery);              
        rs = pst.executeQuery(); 
        ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
        IntColumnNo=StData.getColumnCount();
        StrColumnName = new String[IntColumnNo];
        DefaultTableModel RecordTable = (DefaultTableModel)TableRead.getModel();     
        RecordTable.setColumnCount(0); //Removing Previous Table
        RecordTable.setRowCount(0);
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Adding Columns From DBS to Table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                   
         for(int i=1;i<=IntColumnNo;i++){
             RecordTable.addColumn(StData.getColumnLabel(i));
             StrColumnName[i-1]=StData.getColumnLabel(i);
         }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Adding All Records to the table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             while(rs.next()){
                Vector ColumnData = new Vector(); 
                for(int i=1;i<=IntColumnNo;i++){
                     ColumnData.add(rs.getString(StrColumnName[i-1]));
                }
                RecordTable.addRow(ColumnData);
            }JOptionPane.showMessageDialog(null, "Reading Specific Record/s success");
       }
      catch(Exception e){
          JOptionPane.showMessageDialog(null, "Error detected, restart the program.");
      }
    }//GEN-LAST:event_BReadAllRowsActionPerformed

    private void CBReadTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBReadTableActionPerformed
        
    }//GEN-LAST:event_CBReadTableActionPerformed

    private void BReadChsnRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BReadChsnRowsActionPerformed
      try{
           con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
           Class.forName("com.mysql.jdbc.Driver");
           int IntColumnNo,IntFinishedRow=0, IntTemp=0, IntRowFrom, IntRowTo;
           String StrColumnName[];
           String StrRowFrom = TFReadFrmRow.getText();
           String StrRowTo = TFReadToRow.getText();
           IntRowFrom = Integer.parseInt(StrRowFrom);
           IntRowTo = Integer.parseInt(StrRowTo); 
           StrReadTableSlctd = (String)CBReadTable.getSelectedItem();
           StrReadTableSlctd = StrReadTableSlctd.toLowerCase();
           String StrQuery = "SELECT * FROM "+StrReadTableSlctd;//Reading DBS 
           pst=con.prepareStatement(StrQuery);              
           rs = pst.executeQuery(); 
           ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
           IntColumnNo=StData.getColumnCount();
           StrColumnName = new String[IntColumnNo];
           DefaultTableModel RecordTable = (DefaultTableModel)TableRead.getModel();     
           RecordTable.setColumnCount(0); //Removing Previous Table
           RecordTable.setRowCount(0);
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Adding Columns From DBS to Table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                   
            for(int i=1;i<=IntColumnNo;i++){
                RecordTable.addColumn(StData.getColumnLabel(i));
                StrColumnName[i-1]=StData.getColumnLabel(i);
            }
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Adding Records to the table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(IntRowFrom>0||IntRowTo>0){
                for(int i=1; i<IntRowFrom; i++){  //Moving to the user chosen First Column 
                    rs.next();
                }
                while(rs.next()){
                   Vector ColumnData = new Vector(); 
                   for(int i=1;i<=IntColumnNo;i++){
                        ColumnData.add(rs.getString(StrColumnName[i-1]));
                   }
                   RecordTable.addRow(ColumnData);
                   IntFinishedRow++;
                   if(IntFinishedRow==(IntRowTo-IntRowFrom)+1){
                       IntTemp=1;
                       break;
                   }
               }
               if(IntTemp==1)
                    JOptionPane.showMessageDialog(null, "Reading Specific Record/s success");
               else
                   JOptionPane.showMessageDialog(null, "Albeit given \"To Row No.\" is beyond maximum row, all rows are printed");
            }
       }
      catch(NumberFormatException e){
          JOptionPane.showMessageDialog(null, "Enter Valid \"From Row No.\" and \"To Row No.\" Only");
      }
      catch(Exception e){
          JOptionPane.showMessageDialog(null, "Invalid Input/s");
      }
    }//GEN-LAST:event_BReadChsnRowsActionPerformed

    private void BReadSpsfcRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BReadSpsfcRowActionPerformed
      try{
        con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
        Class.forName("com.mysql.jdbc.Driver");
        int IntColumnNo,temp=0;
        String StrColumnName[];
        StrReadTableSlctd = (String)CBReadTable.getSelectedItem();
        StrReadTableSlctd = StrReadTableSlctd.toLowerCase();
        String StrPrimaryKey = TFPrimaryKey.getText();
        if(!StrPrimaryKey.isEmpty()){
            String StrQuery = "SELECT * FROM "+StrReadTableSlctd;
            pst=con.prepareStatement(StrQuery);              
            rs = pst.executeQuery(); 
            ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
            IntColumnNo=StData.getColumnCount();
            StrColumnName = new String[IntColumnNo];
            DefaultTableModel RecordTable = (DefaultTableModel)TableRead.getModel();     
            RecordTable.setColumnCount(0); //Removing Previous Table
            RecordTable.setRowCount(0);
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Adding Columns From DBS to Table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                   
             for(int i=1;i<=IntColumnNo;i++){
                 RecordTable.addColumn(StData.getColumnLabel(i));
                 StrColumnName[i-1]=StData.getColumnLabel(i);
             }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Searching and Adding the Specific Record to the table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            while(rs.next()){
                if(Objects.equals(rs.getString(StrColumnName[0]),StrPrimaryKey)){
                    Vector ColumnData = new Vector(); 
                    for(int i=1;i<=IntColumnNo;i++){
                         ColumnData.add(rs.getString(StrColumnName[i-1]));
                    }
                    RecordTable.addRow(ColumnData);
                    temp=1;
                }      
            }
            if(temp==1)
                JOptionPane.showMessageDialog(null, "Reading One Specific Record success");
            else
                JOptionPane.showMessageDialog(null, "Please Enter an existing 1st Field Data of a Record");
        }
        else{
            JOptionPane.showMessageDialog(null, "Input the 1st Field Data of the Record you want to read");
        }
      }
      catch(Exception e){
          JOptionPane.showMessageDialog(null, "Invalid Data Inputted");
      }
    }//GEN-LAST:event_BReadSpsfcRowActionPerformed

    private void BUpdateWholeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BUpdateWholeActionPerformed
        String StrUpdateTable="";
        try{
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
            Class.forName("com.mysql.jdbc.Driver");
            int IntColumnNo, IntTemp=0;
            String StrUpdateRecordDataType = (String)CBUpdateRDT.getSelectedItem();
            StrUpdateTable = (String)CBUpdateTable.getSelectedItem();
            StrUpdateTable = StrUpdateTable.toLowerCase();
            String StrUpdateQuery = "SELECT * FROM " + StrUpdateTable;
            String StrUpdateData = TFUpdateData.getText();
            String StrUpdatePrimaryData;
            pst=con.prepareStatement(StrUpdateQuery);              
            rs = pst.executeQuery(); 
            ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
            IntColumnNo= StData.getColumnCount();
            String StrUpdatePrimaryColumnName = StData.getColumnLabel(1); 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~First Field Data Given~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(StrUpdateRecordDataType,"1st Field Data")){    
                while(rs.next()){
                    if(Objects.equals(rs.getString(StrUpdatePrimaryColumnName), StrUpdateData)){ //Find if 1st Field Data Given exists
                        if(IntColumnNo==2){  //Tables with 2 Columns
                            StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                            pst=con.prepareStatement(StrUpdateQuery);              
                            pst.execute(); 
                            JOptionPane.showMessageDialog(null, "Update Record success");
                            IntTemp=1;
                            break;
                        }
                        if(IntColumnNo==3){  //Tables with 3 Columns
                            if(Objects.equals(StrUpdateTable,"branch")){//Branch Table
                                StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"',"+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                                pst=con.prepareStatement(StrUpdateQuery);              
                                pst.execute(); 
                                JOptionPane.showMessageDialog(null, "Update Record success");  
                                IntTemp=1;
                                break;
                            }
                            else{//Store Customer and Service Customer Tables
                                StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                                pst=con.prepareStatement(StrUpdateQuery);              
                                pst.execute(); 
                                JOptionPane.showMessageDialog(null, "Update Record success");  
                                IntTemp=1;
                                break;
                            }
                        }
                        if(IntColumnNo==4){//Tables with 4 Columns
                            if(Objects.equals(StrUpdateTable,"store_transactions")){  //Store Transactions
                                StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                                pst=con.prepareStatement(StrUpdateQuery);              
                                pst.execute(); 
                                JOptionPane.showMessageDialog(null, "Update Record success");
                                IntTemp=1;
                                break;
                            }
                            else{ //Other 4 Column Tables
                                StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"',"+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"',"+TFUpdateLabel4.getText()+"='"+TFUpdateC4.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                                pst=con.prepareStatement(StrUpdateQuery);              
                                pst.execute(); 
                                JOptionPane.showMessageDialog(null, "Update Record success");
                                IntTemp=1;
                                break;
                            }
                        }
                        if(IntColumnNo==5){//Tables with 5 Columns
                            StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"',"+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"',"+TFUpdateLabel4.getText()+"='"+TFUpdateC4.getText()+"',"+TFUpdateLabel5.getText()+"='"+TFUpdateC5.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                            pst=con.prepareStatement(StrUpdateQuery);              
                            pst.execute(); 
                            JOptionPane.showMessageDialog(null, "Update Record success");
                            IntTemp=1;
                            break;
                        }
                        if(IntColumnNo==6){//Service Transactions
                            StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"',"+TFUpdateLabel5.getText()+"='"+TFUpdateC5.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                            pst=con.prepareStatement(StrUpdateQuery);              
                            pst.execute(); 
                            JOptionPane.showMessageDialog(null, "Update Record success");
                            IntTemp=1;
                            break;
                        }
                    }
                }
                if(IntTemp==0){  //1st Field Data Given doesnt exist
                        JOptionPane.showMessageDialog(null, "1st Field Data Given does not exist");
                }
                
            }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Row No. Given~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(StrUpdateRecordDataType,"Row No.")){     
                int IntUpdateRowNo = Integer.parseInt(TFUpdateData.getText());  //Finding the Row 
                for(int i=1; i<=IntUpdateRowNo;i++){
                    rs.next();
                }
                StrUpdatePrimaryData =rs.getString(StrUpdatePrimaryColumnName);
                if(IntColumnNo==2){  //Tables with 2 Columns
                    StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                    pst=con.prepareStatement(StrUpdateQuery);              
                    pst.execute(); 
                    JOptionPane.showMessageDialog(null, "Update Record success");
                 }
                if(IntColumnNo==3){  //Tables with 3 Columns
                    if(Objects.equals(StrUpdateTable,"branch")){//Branch Table
                        StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"',"+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                        pst=con.prepareStatement(StrUpdateQuery);              
                        pst.execute(); 
                        JOptionPane.showMessageDialog(null, "Update Record success");
                    }
                    else{//Store Customer and Service Customer Tables
                        StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                        pst=con.prepareStatement(StrUpdateQuery);              
                        pst.execute(); 
                        JOptionPane.showMessageDialog(null, "Update Record success");  
                    }
                }
                if(IntColumnNo==4){//Tables with 4 Columns
                    if(Objects.equals(StrUpdateTable,"store_transactions")){  //Store Transactions
                        StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                        pst=con.prepareStatement(StrUpdateQuery);              
                        pst.execute(); 
                        JOptionPane.showMessageDialog(null, "Update Record success");
                    }
                    else{ //Other 4 Column Table
                        StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"',"+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"',"+TFUpdateLabel4.getText()+"='"+TFUpdateC4.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                        pst=con.prepareStatement(StrUpdateQuery);              
                        pst.execute(); 
                        JOptionPane.showMessageDialog(null, "Update Record success");
                    }
                }
                if(IntColumnNo==5){//Payment Service Orders
                    StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel1.getText()+"='"+TFUpdateC1.getText()+"',"+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"',"+TFUpdateLabel4.getText()+"='"+TFUpdateC4.getText()+"',"+TFUpdateLabel5.getText()+"='"+TFUpdateC5.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                    pst=con.prepareStatement(StrUpdateQuery);              
                    pst.execute(); 
                    JOptionPane.showMessageDialog(null, "Update Record success");
                }
                if(IntColumnNo==6){//Service Transactions 
                    StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+TFUpdateLabel2.getText()+"='"+TFUpdateC2.getText()+"',"+TFUpdateLabel3.getText()+"='"+TFUpdateC3.getText()+"',"+TFUpdateLabel5.getText()+"='"+TFUpdateC5.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                    pst=con.prepareStatement(StrUpdateQuery);              
                    pst.execute(); 
                    JOptionPane.showMessageDialog(null, "Update Record success");
                }
            }
        }      //Error Catching
        catch(MysqlDataTruncation e){
            JOptionPane.showMessageDialog(null, "Invalid Input");
        }
        catch(MySQLIntegrityConstraintViolationException e){
                JOptionPane.showMessageDialog(null, "Inputted Primary Key already exists");
        }
        catch(SQLException e){
           JOptionPane.showMessageDialog(null, "Row Exceeded, enter only an existing Row No.");
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter Valid Row No.");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Inputs");    
        }
    }//GEN-LAST:event_BUpdateWholeActionPerformed

    private void CBUpdateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBUpdateTableActionPerformed
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~UPDATE PANEL SETTING~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
        int IntColumnNo=0;
        String StrColumnName[]= new String[6];
        try{
           con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
           Class.forName("com.mysql.jdbc.Driver");
           String StrUpdateSlctdTable =(String) CBUpdateTable.getSelectedItem();
           StrUpdateSlctdTable = StrUpdateSlctdTable.toLowerCase();
           pst=con.prepareStatement("SELECT * FROM "+StrUpdateSlctdTable);              
           rs = pst.executeQuery(); 
           ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
           IntColumnNo=StData.getColumnCount();
           StrColumnName = new String[6];
            for(int i=1;i<=IntColumnNo;i++){                  //Saving Column Labels   
                StrColumnName[i-1]=StData.getColumnLabel(i);
            }
            TFUpdateC1.setEditable(false);TFUpdateC1.setText("");      //Disabling and Reseting all Columns for new process
            TFUpdateC2.setEditable(false);TFUpdateC2.setText("");  
            TFUpdateC3.setEditable(false);TFUpdateC3.setText("");  
            TFUpdateC4.setEditable(false);TFUpdateC4.setText("");  
            TFUpdateC5.setEditable(false);TFUpdateC5.setText("");  
            TFUpdateC6.setEditable(false);TFUpdateC6.setText("");  
            switch (IntColumnNo) {                     //Setting Needed Text Fields only 
                case 1:
                  TFUpdateC1.setEditable(true);
                  break;
                case 2:
                  TFUpdateC1.setEditable(true);
                  TFUpdateC2.setEditable(true);
                  break;
                case 3:
                  TFUpdateC1.setEditable(true);
                  TFUpdateC2.setEditable(true);
                  TFUpdateC3.setEditable(true);
                  break;
                case 4:
                  TFUpdateC1.setEditable(true);
                  TFUpdateC2.setEditable(true);
                  TFUpdateC3.setEditable(true);
                  TFUpdateC4.setEditable(true);
                  break;
                case 5:
                  TFUpdateC1.setEditable(true);
                  TFUpdateC2.setEditable(true);
                  TFUpdateC3.setEditable(true);
                  TFUpdateC4.setEditable(true);
                  TFUpdateC5.setEditable(true);
                  break;
                case 6:
                  TFUpdateC1.setEditable(true);
                  TFUpdateC2.setEditable(true);
                  TFUpdateC3.setEditable(true);
                  TFUpdateC4.setEditable(true);
                  TFUpdateC5.setEditable(true);
                  TFUpdateC6.setEditable(true);
                  break;
            }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Disabling Derived Attribute and Foreign Key TextFields~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(StrUpdateSlctdTable,"store_transactions")||Objects.equals(StrUpdateSlctdTable,"service_transactions")){       //Store_Trasactions and Service_Transactions
                TFUpdateC4.setText("Derived Attribute");
                TFUpdateC4.setEditable(false);
                TFUpdateC1.setText("Foreign Key");
                TFUpdateC1.setEditable(false);
                if(Objects.equals(StrUpdateSlctdTable,"service_transactions")){
                    TFUpdateC6.setText("Derived Attribute");
                    TFUpdateC6.setEditable(false);
                }
            }
            if(Objects.equals(StrUpdateSlctdTable,"branch_tin")||Objects.equals(StrUpdateSlctdTable,"branch_bir")){      //Branch_TIN and Branch_BIR
                TFUpdateC2.setText("Foreign Key");
                TFUpdateC2.setEditable(false);
            }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Setting Column Names to the Whole Record Update~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            TFUpdateLabel1.setText(StrColumnName[0]);                   
            TFUpdateLabel1.setBackground(new Color(200, 211, 230));
            TFUpdateLabel2.setText(StrColumnName[1]);
            TFUpdateLabel2.setBackground(new Color(200, 211, 230));
            TFUpdateLabel3.setText(StrColumnName[2]);
            TFUpdateLabel3.setBackground(new Color(200, 211, 230));
            TFUpdateLabel4.setText(StrColumnName[3]);
            TFUpdateLabel4.setBackground(new Color(200, 211, 230));
            TFUpdateLabel5.setText(StrColumnName[4]);
            TFUpdateLabel5.setBackground(new Color(200, 211, 230));
            TFUpdateLabel6.setText(StrColumnName[5]);
            TFUpdateLabel6.setBackground(new Color(200, 211, 230));
         }
        catch(Exception e){   //Error Catching
          JOptionPane.showMessageDialog(null, "Invalid Inputs");
        }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Single Attribute Combo Box Update~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
   DefaultComboBoxModel CBModelUpdateS = new DefaultComboBoxModel();
   CBUpdateSingleAttribute.setModel(CBModelUpdateS);
    for(int i=1;i<=IntColumnNo;i++){
       CBModelUpdateS.addElement(StrColumnName[i-1]);
    }
    CBUpdateSingleAttribute.setModel(CBModelUpdateS);
    
        
    }//GEN-LAST:event_CBUpdateTableActionPerformed

    private void CBUpdateSingleAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBUpdateSingleAttributeActionPerformed
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SINGLE ATTRIBUTE UPDATE FOREIGN KEYS AND DERIVED ATTRIBUTES CONTROL~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        String StrUpdateTable = (String)CBUpdateTable.getSelectedItem();
        StrUpdateTable = StrUpdateTable.toLowerCase();
        String StrUpdateSingle = (String)CBUpdateSingleAttribute.getSelectedItem();
        TFUpdateNew.setText("");  //Resetting TextField for Single Attribute
        TFUpdateNew.setEditable(true);
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Service Transactions and Store Transactions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        if(Objects.equals(StrUpdateTable,"service_transactions")||Objects.equals(StrUpdateTable,"store_transactions")){
            if(Objects.equals(StrUpdateSingle, "Store_Receipt_Code")||Objects.equals(StrUpdateSingle, "Service_Receipt_Code")){ //Disabling edits for Foreign Keys
                TFUpdateNew.setText("Foreign Key");
                TFUpdateNew.setEditable(false);
            }
            if(Objects.equals(StrUpdateSingle, "Store_Change")||Objects.equals(StrUpdateSingle, "Total_Service_Price")||Objects.equals(StrUpdateSingle, "Service_Change")){ //Disabling edits for Foreign Keys
                TFUpdateNew.setText("Derived Attribute");
                TFUpdateNew.setEditable(false);
            }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Branch BIR and Branch TIN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }
        if(Objects.equals(StrUpdateSingle, "TIN_Code")&&Objects.equals(StrUpdateTable, "branch_bir")){ //Disabling edits for Foreign Keys
                TFUpdateNew.setText("Foreign Key");
                TFUpdateNew.setEditable(false);
        }
        if(Objects.equals(StrUpdateSingle, "Branch_Location")&&Objects.equals(StrUpdateTable, "branch_tin")){ //Disabling edits for Foreign Keys
                TFUpdateNew.setText("Foreign Key");
                TFUpdateNew.setEditable(false);
        }
    }//GEN-LAST:event_CBUpdateSingleAttributeActionPerformed

    private void BUpdateOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BUpdateOneActionPerformed
   //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SINGLE ATTRIBUTE UPDATE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        int IntTemp=0;
        try{
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
            Class.forName("com.mysql.jdbc.Driver");
            String StrUpdateRecordDataType = (String)CBUpdateRDT.getSelectedItem();
            String StrUpdateTable = (String)CBUpdateTable.getSelectedItem();
            StrUpdateTable = StrUpdateTable.toLowerCase();
            String StrUpdateQuery = "SELECT * FROM " + StrUpdateTable;
            String StrUpdateData = TFUpdateData.getText();
            String StrUpdatePrimaryData;
            pst=con.prepareStatement(StrUpdateQuery);              
            rs = pst.executeQuery(); 
            ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
            String StrUpdatePrimaryColumnName = StData.getColumnLabel(1);
            if(Objects.equals(StrUpdateRecordDataType,"1st Field Data")){    //First Field Data Given
                while(rs.next()){
                    if(Objects.equals(StrUpdateData, rs.getString(StrUpdatePrimaryColumnName))){
                        IntTemp=1;
                    }
                }
                if(IntTemp==1){
                    StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+(String)CBUpdateSingleAttribute.getSelectedItem()+"='"+TFUpdateNew.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdateData+"'";
                    pst=con.prepareStatement(StrUpdateQuery);              
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Update Record Data success");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Input a valid \"1st Field Data\" of the chosen Table");
                }
            }
            if(Objects.equals(StrUpdateRecordDataType,"Row No.")){     //Row No. Given
                int IntUpdateRowNo = Integer.parseInt(TFUpdateData.getText()); 
                for(int i=1; i<=IntUpdateRowNo;i++){
                    rs.next();
                }
                StrUpdatePrimaryData =rs.getString(StrUpdatePrimaryColumnName);
                StrUpdateQuery = "UPDATE "+StrUpdateTable+" SET "+(String)CBUpdateSingleAttribute.getSelectedItem()+"='"+TFUpdateNew.getText()+"' WHERE "+StrUpdateTable+"."+StrUpdatePrimaryColumnName+"='"+StrUpdatePrimaryData+"'";
                pst=con.prepareStatement(StrUpdateQuery);              
                pst.execute(); 
                JOptionPane.showMessageDialog(null, "Update Record Data success");
            }
        }//Error Catching
        catch(MysqlDataTruncation e){
            JOptionPane.showMessageDialog(null, "Invalid Input");
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Row Exceeded, enter only an existing Row No.");
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter only an Integer for Row No.");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input");
        }
    }//GEN-LAST:event_BUpdateOneActionPerformed

    private void BtnBnEBranchRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBnEBranchRegActionPerformed
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BRANCH REGISTRY~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
        try{
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Employee~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
            String StrNewBranchName = TFBnEBranchN.getText();
            String StrBnETIN = TFBnETIN.getText();
            String StrBnEBIR = TFBnEBIR.getText();
            String StrBnEBD = TFBnEBD.getText();
            String StrBnEBAdd = TFBnEBAdd.getText();
            int IntTINExists=0, IntBIRExists=0;
            if(!StrNewBranchName.isEmpty()&&!StrBnETIN.isEmpty()&&!StrBnEBIR.isEmpty()&&!StrBnEBD.isEmpty()&&!StrBnEBAdd.isEmpty()){  //To verify all details are provided
                con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); 
                Class.forName("com.mysql.jdbc.Driver");
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Check if BIR or TIN already exists~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
                pst=con.prepareStatement("SELECT * FROM branch_tin");      //TIN Checking        
                rs = pst.executeQuery(); 
                while(rs.next()){
                    if(Objects.equals(StrBnETIN, rs.getString("TIN_Code"))){
                        IntTINExists=1;
                    }
                }
                pst=con.prepareStatement("SELECT * FROM branch_bir");      //TIN Checking        
                rs = pst.executeQuery(); 
                while(rs.next()){
                    if(Objects.equals(StrBnETIN, rs.getString("BIR_Permit"))){
                        IntBIRExists=1;
                    }
                }
                if(IntTINExists==0&&IntBIRExists==0){
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Branch Table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    pst =con.prepareStatement("INSERT INTO `branch` (`Branch_Location`, `Branch_Name`, `Branch_Dimensions`) VALUES (?, ?, ?);");
                    pst.setString(1, StrBnEBAdd);
                    pst.setString(2, StrNewBranchName);
                    pst.setString(3, StrBnEBD);
                    pst.executeUpdate(); 
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Branch_TIN Table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    pst =con.prepareStatement("INSERT INTO `branch_tin` (`TIN_Code`, `Branch_Location`) VALUES (?, ?);");
                    pst.setString(1, StrBnETIN);
                    pst.setString(2, StrBnEBAdd);
                    pst.executeUpdate(); 
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Branch_BIR Table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~              
                    pst =con.prepareStatement("INSERT INTO `branch_bir` (`BIR_Permit`, `TIN_Code`) VALUES (?, ?);");
                    pst.setString(1, StrBnEBIR);
                    pst.setString(2, StrBnETIN);
                    pst.executeUpdate(); 
                    JOptionPane.showMessageDialog(null,"New Branch successfully registered");
                    Update();
                }
                else {//BIR or TIN already exist
                    if(IntTINExists==1&&IntBIRExists==1)
                        JOptionPane.showMessageDialog(null,"TIN Code and BIR Permit already exist. Input new ones.");
                    if(IntTINExists==1&&IntBIRExists==0)
                        JOptionPane.showMessageDialog(null,"TIN Code already exists. Input new one.");
                    if(IntBIRExists==1&&IntTINExists==0)
                        JOptionPane.showMessageDialog(null,"BIR Permit already exists. Input new one.");
                    
                }
            }
            else //Not all details are provided   
                JOptionPane.showMessageDialog(null,"Input all Branch Details to successfully register new Branch");
        }
        catch(MysqlDataTruncation e){ 
            JOptionPane.showMessageDialog(null, "Details should be within the Limit. Check Limits tab for more information");
        } 
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"Invalid Inputs");
        }
    }//GEN-LAST:event_BtnBnEBranchRegActionPerformed

    private void BtnBnEEmpRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBnEEmpRegActionPerformed
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~EMPLOYEE REGISTRY~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
        try{
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Employee~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
            String StrNewEmpN = TFBnEEmpN.getText();
            String StrNewEmpC = TFBnEEmpC.getText();
            String StrNewEmpAdd =TFBnEEmpAdd.getText(); 
            String StrBnEBranchLoc = (String)CBBnEBranchLoc.getSelectedItem(); System.out.print(StrBnEBranchLoc.isEmpty());
            if(!StrNewEmpN.isEmpty()&&!StrNewEmpC.isEmpty()&&!StrNewEmpAdd.isEmpty()&&!StrBnEBranchLoc.isEmpty()&&StrNewEmpN.length()<31&&StrNewEmpC.length()<12&&StrNewEmpAdd.length()<81){  //To verify all details are provided and within the String length limit 
                con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); 
                Class.forName("com.mysql.jdbc.Driver");
                String StrBnEShift = (String)CBBnEShift.getSelectedItem();
                String StrBnEPos = (String)CBBnEEmpPos.getSelectedItem();
                pst =con.prepareStatement("INSERT INTO `employee` (`Employee_ID`, `Branch_Location`, `Shift_Hours`, `Position`) VALUES (?, ?, ?, ?);");
                pst.setString(1, null);
                pst.setString(2, StrBnEBranchLoc);
                pst.setString(3, StrBnEShift);
                pst.setString(4, StrBnEPos);
                pst.executeUpdate(); 
       //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Inputting Employee Information~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                pst=con.prepareStatement("SELECT * FROM `employee`");    //Getting Generated ID 
                rs = pst.executeQuery(); 
                String StrNewEmpID="";
                ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
                while(rs.next()){
                   StrNewEmpID= rs.getString("Employee_ID");
                }
                pst =con.prepareStatement("INSERT INTO `employee_information` (`Employee_Address`, `Employee_ID`, `Employee_Name`, `Employee_Contact`) VALUES (?, ?, ?, ?);");
                pst.setString(1, StrNewEmpAdd);
                pst.setString(2, StrNewEmpID);
                pst.setString(3, StrNewEmpN);
                pst.setString(4, StrNewEmpC);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null,"New Employee successfully registered");
                Update();
            }
            else{
                if(StrBnEBranchLoc.isEmpty())
                    JOptionPane.showMessageDialog(null,"Register a Branch in Branch Registry first");
                else
                    JOptionPane.showMessageDialog(null,"Input all details to register new Employee");
            }
        }
        catch(MysqlDataTruncation e){
            JOptionPane.showMessageDialog(null, "Details should be within the Limit. Check Limits tab for more information");
        } 
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(null,"Register a Branch in Branch Registry first");
        } 
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"Invalid Inputs");
        }
    }//GEN-LAST:event_BtnBnEEmpRegActionPerformed

    private void TFBnEEmpAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFBnEEmpAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFBnEEmpAddActionPerformed

    private void TFBnEBAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFBnEBAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFBnEBAddActionPerformed

    private void CBLimitsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBLimitsTableActionPerformed
       
    }//GEN-LAST:event_CBLimitsTableActionPerformed

    private void BtnLimitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLimitsActionPerformed
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIMITS TABLE CREATION~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
        try{
          con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
          Class.forName("com.mysql.jdbc.Driver");
          String StrColumnName[];
          int Temp=0;
          String StrLimitsTableSlctd = (String)CBLimitsTable.getSelectedItem();
          StrLimitsTableSlctd = StrLimitsTableSlctd.toLowerCase();
          String StrData ="";
          String StrQuery = "SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.Columns WHERE TABLE_SCHEMA = 'im_database' AND TABLE_NAME = '"+StrLimitsTableSlctd+"';";//Reading DBS 
          pst=con.prepareStatement(StrQuery);              
          rs = pst.executeQuery(); 
          ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
          StrColumnName = new String[3];
          DefaultTableModel RecordTable = (DefaultTableModel)TableLimits.getModel();  //Removing Previous Table
          RecordTable.setRowCount(0);
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Getting Columns From DBS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                   
           for(int i=1;i<=3;i++){
               StrColumnName[i-1]=StData.getColumnLabel(i);
           }
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Adding Data to the table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            while(rs.next()){
                Vector ColumnData = new Vector(); 
                for(int i=1;i<=3;i++){
                    Temp=0;
                    StrData=rs.getString(StrColumnName[i-1]);
                    if(i==1){ //First Column Data
                        ColumnData.add(StrData);
                    }
                    if(i==2){//Second Column Data
                        if(Objects.equals(StrData, "varchar")){         //Setting the Right Limits (Data Types)
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Employee_Contact")||Objects.equals(rs.getString(StrColumnName[0]), "Customer_Contact")){
                                ColumnData.add("Numbers Only");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Position")||Objects.equals(rs.getString(StrColumnName[0]), "Employee_Name")||Objects.equals(rs.getString(StrColumnName[0]), "Customer_Name")||Objects.equals(rs.getString(StrColumnName[0]), "Branch_Name")||Objects.equals(rs.getString(StrColumnName[0]), "Payment_Service")){
                                ColumnData.add("Letters Only");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Branch_Location")||Objects.equals(rs.getString(StrColumnName[0]), "Employee_Address")){
                                ColumnData.add("Letters and Numbers");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Branch_Dimensions")){
                                ColumnData.add("Numbers and Hyphens");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "BIR_Permit")){
                                ColumnData.add("Letters, Numbers, and Hyphens");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "TIN_Code")){
                                ColumnData.add("Letters and Hyphens");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Shift_Hours")){
                                ColumnData.add("Shift Symbol(Shift Period)");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Service_Order_Date")||Objects.equals(rs.getString(StrColumnName[0]), "Store_Order_Date")){
                                ColumnData.add("mm/dd/yy");
                                Temp=1;
                            }
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Service_Order_Time")||Objects.equals(rs.getString(StrColumnName[0]), "Store_Order_Time")){
                                ColumnData.add("00:00 PM/AM");
                                Temp=1;
                            }
                            if(Temp==0){
                                ColumnData.add("Letters and/or Numbers");
                            }
                        }
                        if(Objects.equals(StrData, "int")){
                            ColumnData.add("Numbers without decimal only");
                        }
                        if(Objects.equals(StrData, "decimal")){
                            ColumnData.add("Numbers with/without decimal only");
                        }
                    }
                    if(i==3){   //Third Column Data
                        if(Objects.equals(StrData,null)){
                            ColumnData.add("2 Million");
                        }
                        if(NumberUtils.isParsable(StrData)){
                            if(Objects.equals(rs.getString(StrColumnName[0]), "Employee_Contact")||Objects.equals(rs.getString(StrColumnName[0]), "Customer_Contact")){
                                StrData = StrData +" Digits";
                                ColumnData.add(StrData);
                            }
                            else{
                                StrData = StrData +" Characters";
                                ColumnData.add(StrData);
                            }
                        }
                    }
                    
                }
                RecordTable.addRow(ColumnData);
            }
            JOptionPane.showMessageDialog(null, "Reading Limits on Table \""+StrLimitsTableSlctd+"\" success");
         }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error detected, Restart the Program");
        }  
    }//GEN-LAST:event_BtnLimitsActionPerformed

    private void BtnDeleteChsnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteChsnActionPerformed
   //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DELETE CHOSEN RECORDS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
        try{
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
            Class.forName("com.mysql.jdbc.Driver");
            int IntRowFrom, IntRowTo, IntRows;
            String StrFirstFieldLabel;
            String StrRowFrom = TFDeleteFromRow.getText();
            String StrRowTo = TFDeleteToRow.getText();
            IntRowFrom = Integer.parseInt(StrRowFrom);
            IntRowTo = Integer.parseInt(StrRowTo); 
            IntRows = (IntRowTo-IntRowFrom)+1;
            String StrDeleteChosenRowsData [] = new String[IntRows];
            String StrDeleteTableSlctd = (String)CBDeleteTable.getSelectedItem(); 
            StrDeleteTableSlctd = StrDeleteTableSlctd.toLowerCase();
            String StrQuery = "SELECT * FROM "+StrDeleteTableSlctd;//Reading DBS 
            pst=con.prepareStatement(StrQuery);              
            rs = pst.executeQuery(); 
            ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
            StrFirstFieldLabel = StData.getColumnLabel(1);                                 
             for(int i=1;i<IntRowFrom;i++){ 
                 rs.next();
             }
             for(int i=1;i<=IntRows;i++){   //Getting Primary Keys of the Chosen Records
                 rs.next();
                 StrDeleteChosenRowsData[i-1]=rs.getString(StrFirstFieldLabel);
             }
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Deleting Records~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            for(int i=0; i<IntRows;i++){
                StrQuery = "DELETE FROM "+StrDeleteTableSlctd+" WHERE "+StrDeleteTableSlctd+"."+StrFirstFieldLabel+"='"+StrDeleteChosenRowsData[i]+"'";
                pst=con.prepareStatement(StrQuery);              
                pst.execute(); 
            }
            JOptionPane.showMessageDialog(null, "Deleting chosen Records success");
            Update();
       }
      catch(NegativeArraySizeException e){
          JOptionPane.showMessageDialog(null, "Enter Valid \"From Row No.\" and \"To Row No.\" only");
      }
      catch(NumberFormatException e){
          JOptionPane.showMessageDialog(null, "Enter Valid \"From Row No.\" and \"To Row No.\" only");
      }
      catch(SQLException e){
          JOptionPane.showMessageDialog(null, "Enter Valid \"From Row No.\" and \"To Row No.\" only");
      }
      catch(Exception e){
          JOptionPane.showMessageDialog(null, "Invalid Input");
      }
    }//GEN-LAST:event_BtnDeleteChsnActionPerformed

    private void BtnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteAllActionPerformed
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DELETE ALL RECORDS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
        try{
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
            Class.forName("com.mysql.jdbc.Driver");
            String StrFirstFieldLabel;
            int IntRows=0;
            String StrDeleteChosenRowsData[];
            String StrDeleteTableSlctd = (String)CBDeleteTable.getSelectedItem(); 
            StrDeleteTableSlctd = StrDeleteTableSlctd.toLowerCase();
            String StrSelected = (String)CBDeleteTable.getSelectedItem();
            String StrMessage  ="Are you sure you want to Delete All Records in \""+StrSelected+"\" Table?";
            int IntDeleteAllResponse = JOptionPane.showConfirmDialog(this,StrMessage,"WARNING",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(IntDeleteAllResponse==JOptionPane.YES_OPTION){
                 String StrQuery = "SELECT * FROM "+StrDeleteTableSlctd;
                 pst=con.prepareStatement(StrQuery);              
                 rs = pst.executeQuery(); 
                 ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
                 StrFirstFieldLabel = StData.getColumnLabel(1);                                 
                 while(rs.next()){   //Getting No. of Rows
                     IntRows++;
                 }
                 StrDeleteChosenRowsData = new String[IntRows];
                 StrQuery = "SELECT * FROM "+StrDeleteTableSlctd;
                 pst=con.prepareStatement(StrQuery);              
                 rs = pst.executeQuery();                               
                 for(int i=0; i<IntRows;i++){  //Getting Primary Keys of Rows
                     rs.next();
                     StrDeleteChosenRowsData[i]=rs.getString(StrFirstFieldLabel);
                 }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Deleting Records~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                 for(int i=0; i<IntRows;i++){
                     StrQuery = "DELETE FROM "+StrDeleteTableSlctd+" WHERE "+StrDeleteTableSlctd+"."+StrFirstFieldLabel+"='"+StrDeleteChosenRowsData[i]+"'";
                     pst=con.prepareStatement(StrQuery);              
                     pst.execute(); 
                 }
                JOptionPane.showMessageDialog(null, "Deleting All Records success");
            }
            Update();
       }
      catch(Exception e){
          JOptionPane.showMessageDialog(null, "Invalid Input");
      }
        
    }//GEN-LAST:event_BtnDeleteAllActionPerformed

    private void BtnDeleteOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteOneActionPerformed
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SINGLE RECORD DELETE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       try{
            con =DriverManager.getConnection("jdbc:mysql://localhost:3306/im_database","root",""); //Setting the Server & Declartions
            Class.forName("com.mysql.jdbc.Driver");
            String StrDeleteType = (String)CBDeleteOneType.getSelectedItem();
            String StrDeleteTable = (String)CBDeleteTable.getSelectedItem();
            StrDeleteTable = StrDeleteTable.toLowerCase();
            String StrQuery = "SELECT * FROM " + StrDeleteTable;
            String StrDeleteOneData = TFDeleteOneData.getText();
            String StrDeletePrimaryData;
            int IntTemp=0;
            pst=con.prepareStatement(StrQuery);              
            rs = pst.executeQuery(); 
            ResultSetMetaData StData =(ResultSetMetaData) rs.getMetaData();
            String StrDeletePrimaryColumnLabel = StData.getColumnLabel(1);
            if(Objects.equals(StrDeleteType,"1st Field Data")){    //First Field Data Given
                while(rs.next()){
                    if(Objects.equals(StrDeleteOneData, rs.getString(StrDeletePrimaryColumnLabel))){
                        IntTemp=1;
                    }
                }
                if(IntTemp==1){
                    StrQuery = "DELETE FROM "+StrDeleteTable+" WHERE "+StrDeleteTable+"."+StrDeletePrimaryColumnLabel+"='"+StrDeleteOneData+"'";
                    pst=con.prepareStatement(StrQuery);              
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Deleting One Record success");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Input a valid \"1st Field Data\" of the chosen Table");
                }
            }
            if(Objects.equals(StrDeleteType,"Row No.")){     //Row No. Given
                int IntDeleteRowNo = Integer.parseInt(TFDeleteOneData.getText());
                for(int i=1; i<=IntDeleteRowNo;i++){
                    rs.next();
                }
                StrDeletePrimaryData =rs.getString(StrDeletePrimaryColumnLabel);
                StrQuery = "DELETE FROM "+StrDeleteTable+" WHERE "+StrDeleteTable+"."+StrDeletePrimaryColumnLabel+"='"+StrDeletePrimaryData+"'";
                pst=con.prepareStatement(StrQuery);              
                pst.execute(); 
                JOptionPane.showMessageDialog(null, "Deleting One Record success");
                Update();
            }
        }//Error Catching
        catch(MysqlDataTruncation e){
            JOptionPane.showMessageDialog(null, "Invalid Input");
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Row Exceeded, enter only an existing Row No.");
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, e);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input");
        }
    }//GEN-LAST:event_BtnDeleteOneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Database_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Database_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Database_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Database_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Database_Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BReadAllRows;
    private javax.swing.JButton BReadChsnRows;
    private javax.swing.JButton BReadSpsfcRow;
    private javax.swing.JButton BUpdateOne;
    private javax.swing.JButton BUpdateWhole;
    private javax.swing.JButton BtnBnEBranchReg;
    private javax.swing.JButton BtnBnEEmpReg;
    private javax.swing.JButton BtnDeleteAll;
    private javax.swing.JButton BtnDeleteChsn;
    private javax.swing.JButton BtnDeleteOne;
    private javax.swing.JToggleButton BtnLimits;
    private javax.swing.JButton BtnTransSrvO;
    private javax.swing.JButton BtnTransStrO;
    private javax.swing.JComboBox<String> CBBnEBranchLoc;
    private javax.swing.JComboBox<String> CBBnEEmpPos;
    private javax.swing.JComboBox<String> CBBnEShift;
    private javax.swing.JComboBox<String> CBDeleteOneType;
    private javax.swing.JComboBox<String> CBDeleteTable;
    private javax.swing.JComboBox<String> CBEmployee;
    private javax.swing.JComboBox<String> CBLimitsTable;
    private javax.swing.JComboBox<String> CBPymSrv;
    private javax.swing.JComboBox<String> CBReadTable;
    private javax.swing.JComboBox<String> CBUpdateRDT;
    private javax.swing.JComboBox<String> CBUpdateSingleAttribute;
    private javax.swing.JComboBox<String> CBUpdateTable;
    private javax.swing.JLabel LabelBnEBAdd;
    private javax.swing.JTextField TFBnEBAdd;
    private javax.swing.JTextField TFBnEBD;
    private javax.swing.JTextField TFBnEBIR;
    private javax.swing.JTextField TFBnEBranchN;
    private javax.swing.JTextField TFBnEEmpAdd;
    private javax.swing.JTextField TFBnEEmpC;
    private javax.swing.JTextField TFBnEEmpN;
    private javax.swing.JTextField TFBnETIN;
    private javax.swing.JTextField TFDeleteFromRow;
    private javax.swing.JTextField TFDeleteOneData;
    private javax.swing.JTextField TFDeleteToRow;
    private javax.swing.JTextField TFPrimaryKey;
    private javax.swing.JTextField TFReadFrmRow;
    private javax.swing.JTextField TFReadToRow;
    private javax.swing.JTextField TFSrvAmt;
    private javax.swing.JTextField TFSrvAmtPd;
    private javax.swing.JTextField TFSrvChange;
    private javax.swing.JTextField TFSrvFee;
    private javax.swing.JTextField TFSrvTP;
    private javax.swing.JTextField TFStrChange;
    private javax.swing.JTextField TFUpdateC1;
    private javax.swing.JTextField TFUpdateC2;
    private javax.swing.JTextField TFUpdateC3;
    private javax.swing.JTextField TFUpdateC4;
    private javax.swing.JTextField TFUpdateC5;
    private javax.swing.JTextField TFUpdateC6;
    private javax.swing.JTextField TFUpdateData;
    private javax.swing.JTextField TFUpdateLabel1;
    private javax.swing.JTextField TFUpdateLabel2;
    private javax.swing.JTextField TFUpdateLabel3;
    private javax.swing.JTextField TFUpdateLabel4;
    private javax.swing.JTextField TFUpdateLabel5;
    private javax.swing.JTextField TFUpdateLabel6;
    private javax.swing.JTextField TFUpdateNew;
    private javax.swing.JTextField TF_CustC;
    private javax.swing.JTextField TF_CustN;
    private javax.swing.JTextField TF_StrAmtP;
    private javax.swing.JTextField TF_StrTP;
    private javax.swing.JTable TableLimits;
    private javax.swing.JTable TableRead;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
